jsdocgen_data("file_lib.php.test_environment.php.jsonp",{"summary":"Exposes a set of global functions to the test scripts.","description":"<p>Test scripts perform one or more test cases and\nselect conditions that needs to be met for the\ntest to be successful. If these conditions are not met\nor the script crashes or have unexpected output,\nthe test host will capture the errors.</p><p>The simplest test looks like this (the name is optional):</p><code class=\"lang-php block\">testCase( <span class=\"string\">'My Test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\ttest( <span class=\"keyword\">true</span> ); <span class=\"comment\">//this condition will pass</span>\n\ttest( <span class=\"keyword\">false</span> ); <span class=\"comment\">//this condition will fail so will the test case</span>\n} );</code><p>Two ways to make a test case:</p><code class=\"lang-php block\"><span class=\"comment\">// number 1</span>\ntestCase( <span class=\"string\">'Description of the test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t<span class=\"comment\">//test a condition and mark the case as failed</span>\n\ttest( <span class=\"number\">1</span> === <span class=\"keyword\">true</span>, <span class=\"string\">'1 is not identical to true'</span> );\n} );\n\n<span class=\"comment\">// number 2</span>\ntestCaseBegin();\n\ttest( <span class=\"keyword\">null</span> !== <span class=\"number\">0</span>, <span class=\"string\">'null is not identical to 0'</span> );\ntestCaseEnd();</code><p>It is popssible to test program flow:</p><code class=\"lang-php block\"><span class=\"comment\">// like this</span>\ntestCase( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">1</span> ) {\n\t\t<span class=\"comment\">// fail the test explicitly</span>\n\t\ttestFailed( <span class=\"string\">'Unexpected program flow'</span> );\n\t}\n} );\n\n<span class=\"comment\">// or like this</span>\ntestCase( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t\n\t<span class=\"comment\">// set some expectations</span>\n\ttestExpect( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> );\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">1</span> ) {\n\t\t<span class=\"comment\">// output something expected</span>\n\t\ttestOut( <span class=\"number\">1</span> );\n\t}\n\t\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">0</span> ) {\n\t\t<span class=\"comment\">// output something expected</span>\n\t\ttestOut( <span class=\"number\">2</span> );\n\t}\n\t\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">3</span> ) {\n\t\t<span class=\"comment\">// output something expected</span>\n\t\ttestOut( <span class=\"number\">3</span> );\n\t}\n\n\t<span class=\"comment\">// the test case will fail because the output is 1, 3 and 1, 2, 3 is expected</span>\n\ttestCheckExpect();\n}); </code><p>It is also possible to test scripts that will crash:</p><code class=\"lang-php block\">testCase( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t<span class=\"comment\">// this test case will succeed only if the script crashes</span>\n\ttestWillCrash();\n\t<span class=\"variable\">$a</span>-&gt;crash();\n} );</code><p>Test scripts can run themselves again with arguments:</p><code class=\"lang-php block\"><span class=\"variable\">$args</span> = testGetArgs();\n\n<span class=\"comment\">// this echo is for debugging the test script, it won't break any test case</span>\ntestEcho( <span class=\"variable\">$args</span> === <span class=\"keyword\">null</span> ? <span class=\"string\">'Script started w/o arguments'</span> : <span class=\"string\">'Script started with arguments'</span> );\n\n<span class=\"keyword\">if</span> ( <span class=\"variable\">$args</span> === <span class=\"keyword\">null</span> ) {\n\ttestReRun( <span class=\"string\">'fork myself'</span> );\n}</code>","tags":{"package":"phptestr.test_environment"},"def":{"type":"file","name":"lib/php/test_environment.php"}});