jsdocgen_data("intro.jsonp",{"description":"<a name=\"phptestr\"></a><h1>phptestr</h1><p>phptestr is framework for writing unitests for PHP and GUI for displaying the results.\nThe project aims to provide flexible environment that makes writing tests quick and easy.\nBy providing GUI environment for testing it further encourages test driven development.\nThe project is divided into \"host\" and \"script\" part. The host starts each test\nscript in a new sandbox thus ensuring no kind of error could break it and no error\nwill remain untraced.</p><p><strong>Features:</strong></p><ul><li>Easy to start and use, no dependencies to install.</li><li>Short and uncomplicated tests.</li><li>Code coverage.</li><li>Stack traces for errors and exceptions with realtime source display.</li></ul><a name=\"what-does-a-test-look-like\"></a><h2>What does a test look like?</h2><code class=\"lang-php block\">testCase( <span class=\"string\">'My Test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\ttest( <span class=\"keyword\">true</span> ); <span class=\"comment\">// this condition will pass</span>\n\ttest( <span class=\"keyword\">false</span> ); <span class=\"comment\">// this condition will fail so will the test case</span>\n} );</code><a name=\"what-does-the-gui-look-like\"></a><h2>What does the GUI look like?</h2><p>Color coded display for tests that passed or failed:\n<img src=\"https:&#47;&#47;raw&#46;github&#46;com&#47;Perennials&#47;phptestr&#47;master&#47;example&#47;tests&#46;png\" /></p><p>Code coverage for each separate test case or for the whole test script:\n<img src=\"https:&#47;&#47;raw&#46;github&#46;com&#47;Perennials&#47;phptestr&#47;master&#47;example&#47;coverage&#46;png\" /></p><p>Stack traces for errors and exceptions with realtime source display:\n<img src=\"https:&#47;&#47;raw&#46;github&#46;com&#47;Perennials&#47;phptestr&#47;master&#47;example&#47;trace&#46;png\" /></p><a name=\"table-of-contents\"></a><h2>Table of contents</h2><ul><li><a href=\"&#35;status\">Status</a></li><li><a href=\"&#35;very&#45;quick&#45;start\">Very quick start</a></li><li><p><a href=\"&#35;usage\">Usage</a></p><ul><li><a href=\"&#35;starting&#45;the&#45;tests\">Starting the tests</a></li><li><a href=\"&#35;code&#45;coverage\">Code coverage</a></li><li><a href=\"&#35;detailed&#45;configuration\">Detailed configuration</a></li><li><a href=\"&#35;default&#45;configuration\">Default configuration</a></li><li><a href=\"&#35;wildcard&#45;patterns\">Wildcard patterns</a></li><li><a href=\"&#35;to&#45;sum&#45;up&#45;the&#45;preparation\">To sum up the preparation</a></li><li><a href=\"&#35;writing&#45;tests\">Writing tests</a></li><li><a href=\"&#35;using&#45;the&#45;gui\">Using the GUI</a></li></ul></li><li><a href=\"&#35;command&#45;line&#45;options\">Command line options</a></li><li><a href=\"&#35;internals\">Internals</a></li><li><p><a href=\"&#35;credits\">Credits</a></p><ul><li><a href=\"&#35;authors\">Authors</a>\n\n</li></ul></li></ul><a name=\"status\"></a><h2>Status</h2><p><strong>This is release version 1.0</strong>.\nDespite the round version number the project has not been used for long time.\nAt the moment I have only Windows available so only Windows is tested,\nbut there is nothing Windows specific in the project.</p><a name=\"very-quick-start\"></a><h2>Very quick start</h2><ol><li>Assuming you already have <code class=\"inline\">PHP 5&#46;3</code> or higher installed in your path.</li><li>Go to where you have downloaded phptestr and start <code class=\"inline\">phptestr &#45;target=example</code> - this should open a new browser window\n  for the address <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr?target=example</code> and show the results of the tests.\n\n</li></ol><p>Further:</p><ul><li>By starting phptestr, it will create a micro server where it listens for commands from your browser.</li><li>Examples are found in the <code class=\"inline\">example</code> folder, they are really short, nothing requiring a lot of effort to learn.</li><li>From these docs you are only concerned with thepackage <code class=\"inline\">phptestr&#46;test&#95;environment</code> -\n  this is the environment for the test scripts.</li><li>Very quick explanation of the examples is found in the docs in the file\n  <code class=\"inline\">lib&#47;test&#95;environment&#46;php</code> under the package <code class=\"inline\">phptestr&#46;test&#95;environment</code> (this would be\n  <a href=\"&#35;file&#47;lib&#47;test&#95;environment&#46;php\">docs/index.html#file/lib/test_environment.php</a>).\n\n</li></ul><a name=\"usage\"></a><h2>Usage</h2><p>Since this is tester for PHP, you need to have <code class=\"inline\">PHP 5&#46;3</code> or higher installed, there are no other dependencies.\nIf you are not using Windows, you will need to convert phptestr.bat to shell script (it is two lines long),\nand also download the Node.js binary for your system. Other OS-es will be officially supported in the future.</p><p>You can start the tests in either GUI (browser) mode or CLI mode. This is selected by command line arguments.\nBy just starting <code class=\"inline\">phptestr</code> it will start in GUI mode, opening your default browser and listening on a specific\nport for commands issued by the browser. List of all available command line options is found below.</p><a name=\"starting-the-tests\"></a><h3>Starting the tests</h3><p>To start the tests just run <code class=\"inline\">phptestr</code> and point it to the location of your tests,\ne.g. <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr?target=example</code> - this will run the example\ntests that come with the project. Alternatively you can start <code class=\"inline\">phptestr &#45;target=example</code> directly.\nThe <code class=\"inline\">target</code> argument is directory relative to the directory where phptestr is located.</p><p>If you like to run only a selection of the tests found in this directory you can add\n<code class=\"inline\">filter</code> argument. For example <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr&#46;php?target=example&amp;filter=&#42;&#95;3&#42;&#46;php</code> or\n<code class=\"inline\">phptestr &#45;target=example &#45;filter=&#42;&#95;3&#42;&#46;php</code> will run only the files 'test&#95;3a.php' and 'test&#95;3b.php'.\nFilter patterns are explained below.</p><p>Finally you can interact with the test scripts by passing them some arguments with the argument\ncalled <code class=\"inline\">args</code>. For example <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr?target=example&amp;filter=test&#95;5&#46;php&amp;args=1&amp;args=2</code>\nor <code class=\"inline\">phptestr &#45;target=example &#45;filter=test&#95;5&#46;php &#45;args=1 &#45;args=2</code> will start the fifth example of phptestr,\nwhich can accept arguments, and it will display the value of 'args'.</p><a name=\"code-coverage\"></a><h3>Code coverage</h3><p>For code coverage to work you will need to install and configure xdebug with your PHP installation.\nThen you need to set <code class=\"inline\">xdebug&#46;coverage&#95;enable = On</code> in your php.ini file. Finally you need to pass <code class=\"inline\">&#45;coverage</code>\nargument to phptestr if you want it to collect code coverage information. You can specify this option in the\nconfig (enabled by default) and then you don't need to pass extra command line arguments.\nMore information how to enable code coverage in xdebug is found <a href=\"http:&#47;&#47;xdebug&#46;org&#47;docs&#47;code&#95;coverage\">here</a>.</p><a name=\"detailed-configuration\"></a><h3>Detailed configuration</h3><p>By loading the directory 'example', phptestr checks for the presence of a file named <code class=\"inline\">phptestr&#46;json</code>.\nThis file could be used to specify additional options for your project. None of these\nsettings is mandatory.</p><code class=\"lang-json block\">{\n\t\"<span class=\"attribute\">dir</span>\": <span class=\"value\"><span class=\"string\">\"\"</span></span>,\n\t\"<span class=\"attribute\">init</span>\": <span class=\"value\"><span class=\"string\">\"\"</span></span>,\n\t\"<span class=\"attribute\">pattern</span>\": <span class=\"value\"><span class=\"string\">\"*.php:.*|_*\"</span></span>,\n\t\"<span class=\"attribute\">coverage</span>\": <span class=\"value\"><span class=\"literal\">false</span></span>,\n\t\"<span class=\"attribute\">phpbin</span>\": <span class=\"value\"><span class=\"string\">\"php\"</span></span>,\n\t\"<span class=\"attribute\">phpini</span>\": <span class=\"value\"><span class=\"string\">\"\"</span>\n}</span></code><ul><li><code class=\"inline\">dir</code> - can be used to override the base directory of your scripts.</li><li><code class=\"inline\">init</code> - can be used to specify initialization script for your project. E.g. to include some\n  prerequisites or to boot your __autoload function.</li><li><code class=\"inline\">pattern</code> - can be used to override which files will be recognized as test scripts (see below).\n  The default pattern is the one above - includes all '.php' files, non recursively, excluding\n  all files starting with dot or underscore.</li><li><code class=\"inline\">coverage</code> - boolean value to enable or disable collection of code coverage information for tests.\n  This is disabled by default for individual test suites, but is enabled in the default\n  configuration.</li><li><code class=\"inline\">phpbin</code> - PHP binary to use for executing the scripts.</li><li><code class=\"inline\">phpini</code> - php.ini file to use for configuring PHP.\n\n</li></ul><a name=\"default-configuration\"></a><h3>Default configuration</h3><p>On startup phptestr will attempt to load <code class=\"inline\">phptestr&#46;json</code> from its own directory. This file has the same\nformat as in the previous section and whatever is found there will be used as default configuration.\nThis is a good place to configure the directory of your PHP installation. By default code coverage\nis enabled for all tests through this file.</p><a name=\"wildcard-patterns\"></a><h3>Wildcard patterns</h3><p>Patterns are simple regular expressions. <code class=\"inline\">&#42;</code> matches everything but forward slash <code class=\"inline\">&#47;</code>, and <code class=\"inline\">&#42;&#42;</code>\nmatches everything. Non greedy and only forward slashes are supported (they work fine on Windows).\nFor example <code class=\"inline\">&#42;&#46;php</code> will match all files with extension 'php' in the same directory. <code class=\"inline\">&#42;&#42;&#46;php</code>\nwill match all files with extension 'php' in the same directory and all sub directories. Multiple\npatterns can be delimited with a pipe <code class=\"inline\">&#124;</code>. For example <code class=\"inline\">&#42;&#46;php4&#124;&#42;&#46;php5</code> will match all files \nwith extension 'php4' or 'php5'. Additionally a list of exclude patterns can be appended after a\ncolon <code class=\"inline\">:</code>. Files and directories matching one of the exclude patterns will be filtered out.</p><a name=\"to-sum-up-the-preparation\"></a><h3>To sum up the preparation</h3><p>Lets say we have a folder named 'tests' where we will place our test scripts. We create a file named\n<code class=\"inline\">phptestr&#46;json</code> in this folder and place this inside the file:</p><code class=\"lang-json block\">{\n\t\"<span class=\"attribute\">init</span>\": <span class=\"value\"><span class=\"string\">\"init_tests.php\"</span></span>,\n\t\"<span class=\"attribute\">pattern</span>\": <span class=\"value\"><span class=\"string\">\"**/**.php:_*|**/_*\"</span>\n}</span></code><p>This will tell <code class=\"inline\">phptestr</code> to test all files with extension 'php' in all subfolders, but not in the\nsame folder (we don't want our init script to be treated as a test script) and also to include a\nfile named 'init_tests.php' before loading each test script.</p><p>So we have a nice setup and only have to run <code class=\"inline\">phptestr &#45;target=&#46;&#46;&#47;myproject&#47;tests</code>.</p><p>Be mindful that phptestr expects the error logging configuration of PHP to be in a certain way.\nIt sets this configuration before running a test script, but you should take care that your\ninit script or any library it may include will not change these settings. If you do change them\nit is possible that errors in your scripts are not properly tracked. If you need to check exactly\nwhat the error logging settings are check the file 'lib/run_test_script.php'. Additionally, your\nscripts should not output anything to the console (stdout) or you will get errors in your tests.\nIf you need to output something while testing use the appropriate functions provided by the\ntest environment.</p><a name=\"writing-tests\"></a><h3>Writing tests</h3><p>Test are created by writing PHP files describing groups of test conditions. The groups\nare called \"test cases\". And each condition is a test.</p><p>The simplest test looks like this (the name is optional):</p><code class=\"lang-php block\">testCase( <span class=\"string\">'My Test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\ttest( <span class=\"keyword\">true</span> ); <span class=\"comment\">//this condition will pass</span>\n\ttest( <span class=\"keyword\">false</span> ); <span class=\"comment\">//this condition will fail so will the test case</span>\n} );</code><p>Two ways to make a test case:</p><code class=\"lang-php block\"><span class=\"comment\">// number 1</span>\ntestCase( <span class=\"string\">'Description of the test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t<span class=\"comment\">//test a condition and mark the case as failed</span>\n\ttest( <span class=\"number\">1</span> === <span class=\"keyword\">true</span>, <span class=\"string\">'1 is not identical to true'</span> );\n} );\n\n<span class=\"comment\">// number 2</span>\ntestCaseBegin();\n\ttest( <span class=\"keyword\">null</span> !== <span class=\"number\">0</span>, <span class=\"string\">'null is not identical to 0'</span> );\ntestCaseEnd();</code><p>It is popssible to test program flow:</p><code class=\"lang-php block\"><span class=\"comment\">// like this</span>\ntestCase( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">1</span> ) {\n\t\t<span class=\"comment\">// fail the test explicitly</span>\n\t\ttestFailed( <span class=\"string\">'Unexpected program flow'</span> );\n\t}\n} );\n\n<span class=\"comment\">// or like this</span>\ntestCase( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t\n\t<span class=\"comment\">// set some expectations</span>\n\ttestExpect( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> );\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">1</span> ) {\n\t\t<span class=\"comment\">// output something expected</span>\n\t\ttestOut(<span class=\"number\">1</span>);\n\t}\n\t\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">0</span> ) {\n\t\t<span class=\"comment\">// output something expected</span>\n\t\ttestOut(<span class=\"number\">2</span>);\n\t}\n\t\n\t<span class=\"keyword\">if</span> ( <span class=\"number\">3</span> ) {\n\t\t<span class=\"comment\">// output something expected</span>\n\t\ttestOut(<span class=\"number\">3</span>);\n\t}\n\n\t<span class=\"comment\">// the test case will fail because the output is 1, 3 and 1, 2, 3 is expected</span>\n\ttestCheckExpect();\n}); </code><p>It is also possible to test scripts that will crash:</p><code class=\"lang-php block\">testCase( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t<span class=\"comment\">// this test case will succeed only if the script crashes</span>\n\ttestWillCrash();\n\t<span class=\"variable\">$a</span>-&gt;crash();\n} );</code><p>Test scripts can run themselves again with arguments:</p><code class=\"lang-php block\"><span class=\"variable\">$args</span> = testGetArgs();\n\n<span class=\"comment\">// this echo is for debugging the test script, it won't break any test case</span>\ntestEcho( <span class=\"variable\">$args</span> === <span class=\"keyword\">null</span> ? <span class=\"string\">'Script started w/o arguments'</span> : <span class=\"string\">'Script started with arguments'</span> );\n\n<span class=\"keyword\">if</span> ( <span class=\"variable\">$args</span> === <span class=\"keyword\">null</span> ) {\n\ttestReRun( <span class=\"string\">'fork myself'</span> );\n}</code><p>These example can be found live in the example folder.</p><p>For overview of all supported functions in the test environment (e.g. testCase(), test(), etc.)\nlook in the docs for file <strong>'test&#95;environment.php'</strong> under the package\n<strong>'phptestr.test&#95;environment'</strong>. In this file you will find short overview of all functions\nwith examples how to use them. These examples are found as working scripts in the <em>example</em> subfolder\nof phptestr. In the docs, under the same section, you can also check the reference for each\nindividual function.</p><a name=\"using-the-gui\"></a><h3>Using the GUI</h3><p>Starting <code class=\"inline\">phptestr &#45;target=example</code> will show the results in a simple graphical interface. Each test script\nis represented by a box with the title of the file. Scripts that passed all tests will be\ngreen and will be collapsed by default. You can expand them by clicking on the title.\nScripts which failed to pass all tests or have errors in them will be put on the top of the list\nand will be expanded by default. In the test script you will see green boxes with the names\nall test cases that were successful. Test cases that were not successful are red and will display\nwhat failed or what the error was and on which line of the script it happened. Sometimes you\ncan find additional details if there is a button \"exception\" or \"trace\" in the box.\nInformation echoed by the scripts will be shown in yellow boxes.\nThere is additional link called \"extract...\" next to the title of the file. This will open \nthe selected script, without other scripts, in a new browser tab. Useful while developing or debugging.\nFinally if code coverage is enabled you should will find a \"coverage\" button in the title. Coverage\nis only available for test scripts with successful test cases.</p><p>Screenshot of the results of the example tests can be found in <a href=\"https:&#47;&#47;raw&#46;github&#46;com&#47;Perennials&#47;phptestr&#47;master&#47;example&#47;tests&#46;png\">example/tests.png</a>.</p><a name=\"command-line-options\"></a><h2>Command line options</h2><code class=\"lang-php block\">phptestr [OPTIONS]</code><p>Where <strong>OPTIONS</strong> is:</p><code class=\"lang-php block\">-target=directory</code><p>Directory where to look for tests or phptestr.json. Optional when starting in GUI mode as\nit can be chosen from the browser.</p><code class=\"lang-php block\">-coverage</code><p>Optional. Enables collecting of code coverage information from tests. Depends on xdebug.</p><code class=\"lang-php block\">-cli</code><p>Optional. Will not start a browser but run the tests and display the results in the console. This\nmode does not support all features and is meant for automation.</p><code class=\"lang-php block\">-phpbin=path</code><p>Optional. Path to the PHP binary to use for starting the tests. Defaults to 'php' and it must be installed\nin the system path for the default to work.</p><code class=\"lang-php block\">-phpini=path</code><p>Optional. Path to file or directory with php.ini configuration. This will be passed as argument to PHP.</p><code class=\"lang-php block\">-host=hostname\n-port=portnumber</code><p>Optional, only supported in GUI mode. Will make phptestr listen for browser commands on a different host (ip)\nand port. Defaults to 127.0.0.1:3355 .</p><a name=\"internals\"></a><h2>Internals</h2><a name=\"testing-the-tester\"></a><h3>Testing the tester</h3><p><code class=\"inline\">phptestr test</code> will check that phptestr is working as expected.</p><a name=\"credits\"></a><h2>Credits</h2><p>Third-party software used:</p><ul><li><a href=\"https:&#47;&#47;github&#46;com&#47;isagalaev&#47;highlight&#46;js\">Highlight.js</a></li><li><a href=\"https:&#47;&#47;github&#46;com&#47;pwnall&#47;node&#45;open\">node-open</a>\n\n</li></ul><a name=\"authors\"></a><h3>Authors</h3><p>Borislav Peev (borislav.asdf at gmail dot com)</p>","tags":{},"def":{"type":"page"}});