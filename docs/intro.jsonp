jsdocgen_data("intro.jsonp",{"description":"<h1>phptestr</h1><p>phptestr is framework for writing unitests for PHP and GUI for displaying the results.\nThe project aims to provide flexible environment that makes writing tests quick and easy.\nBy providing GUI environment for testing it further encourages test driven development.\nThe project is divided into \"host\" and \"script\" part. The host forks itself and starts\neach script in a new process thus ensuring no kind of error could break it and no error\nwill remain untraced.</p><h2>Very quick start</h2><ol><li>Check the screenshot in <a href=\"&#46;&#46;&#47;example&#47;screenshot&#46;png\">example/screenshot.png</a>.</li><li>Assuming you already have <code class=\"inline\">PHP 5&#46;4 server</code>, put phptestr on your server,\n   <em>there are no other dependencies</em>.</li><li>Open <a href=\"&#46;&#46;&#47;phptestr&#46;php?target=example\">phptestr.php?target=example</a> in your browser.</li></ol><p>Further:</p><ul><li>Examples are found in the <code class=\"inline\">example</code> folder, they are really short,\n  nothing special to learn.</li><li>From these docs you are only concerned with thepackage <code class=\"inline\">phptestr&#46;test&#95;environment</code> -\n  this is the environment for the test scripts.</li><li>Very quick explanation of the examples is found in the docs in the file\n  <code class=\"inline\">lib&#47;test&#95;environment&#46;php</code> under the package <code class=\"inline\">phptestr&#46;test&#95;environment</code> (this would be\n  <a href=\"&#35;file&#47;lib&#47;test&#95;environment&#46;php\">docs/index.html#file/lib/test_environment.php</a>).</li><li>There are some more unitests in 'lib/travelsdk-core-php/tests' which are part of another\n  library (actually phptestr was developed because of this library).</li></ul><h2>Status</h2><p>This is release version 0.8. It is the first public release and is considered beta. I've\nbeen using it for quite some time, but it is missing a feature or two and can use some polish.\nAt the moment I have only Windows available so only Windows is tested, but (of course)\nthere is nothing Windows specific in the project.</p><h2>Usage</h2><p>At the moment the project requires a web server with <code class=\"inline\">PHP 5&#46;4</code> to run, no other dependencies.\nCLI mode was developed and tested at earlier stages, but it is not supported at the moment\nas the GUI is the favoured environment for testing. The CLI code remains and is scheduled\nfor resurrection in next releases.</p><h3>Starting the tests</h3><p>To start the tests just load <em>phptestr.php</em> from the server and point it to the location\nof your tests, e.g. <a href=\"&#46;&#46;&#47;phptestr&#46;php?target=example\">phptestr.php?target=example</a> - this will\nstart the example tests that come with the project. The <code class=\"inline\">target</code> argument is directory\nrelative to the directory where phptestr is located. This argument defaults to the current\nworking directory, but only if there is <code class=\"inline\">phptestr&#46;json</code> found in there, otherwise the <code class=\"inline\">target</code>\nargument must be specified explicitly.</p><p>If you like to run only a selection of the tests found in this directory you can add\n<code class=\"inline\">filter</code> argument. For example <a href=\"&#46;&#46;&#47;phptestr&#46;php?target=example&amp;filter=&#42;&#95;3&#42;&#46;php\">phptestr.php?target=example&filter=<em>_3</em>.php</a>\nwill run only the files 'test&#95;3a.php' and 'test&#95;3b.php'. Filter patterns are explained below.</p><p>Finally you can interact with the test scripts by passing them some arguments with the argument\ncalled <code class=\"inline\">args</code>. For example <a href=\"&#46;&#46;&#47;phptestr&#46;php?target=example&amp;filter=test&#95;5&#46;php&amp;args=1\">phptestr/phptestr.php?target=example&filter=test_5.php&args=1</a>\nwill start the fifth example of phptestr, which can accept arguments, and it will display the value\nof 'args'. You can pass multiple arguments as you normally would to a PHP web script <code class=\"inline\">&amp;args&#91;&#93;=1&amp;args&#91;&#93;=2</code>.</p><h3>Detailed configuration</h3><p>By loading the directory 'example', phptestr checks for the presence of a file named <code class=\"inline\">phptestr&#46;json</code>.\nThis file could be used to specify additional options for your project. None of these\nsettings is mandatory.</p><code class=\"lang-js block\">{\n\t\"dir\": \"\",\n\t\"init\": \"\",\n\t\"pattern\": \"*.php:_*\"\n}</code><ul><li><code class=\"inline\">dir</code> - can be used to override the base directory of your scripts.</li><li><code class=\"inline\">init</code> - can be used to specify initialization script for your project. E.g. to include some\n  prerequisites or to boot your __autoload function.</li><li><code class=\"inline\">pattern</code> - can be used to override which files will be recognized as test scripts (see below).\n  The default pattern is the one above - includes all '.php' files, non recursively, excluding\n  all files starting with underscore.</li></ul><h3>Wildcard patterns</h3><p>Patterns are simple regular expressions. <code class=\"inline\">&#42;</code> matches everything but forward slash <code class=\"inline\">&#47;</code>, and <code class=\"inline\">&#42;&#42;</code>\nmatches everything. Non greedy and only forward slashes are supported (they work fine on Windows).\nFor example <code class=\"inline\">&#42;&#46;php</code> will match all files with extension 'php' in the same directory. <code class=\"inline\">&#42;&#42;&#46;php</code>\nwill match all files with extension 'php' in the same directory and all sub directories. Multiple\npatterns can be delimited with a pipe <code class=\"inline\">&#124;</code>. For example <code class=\"inline\">&#42;&#46;php4&#124;&#42;&#46;php5</code> will match all files \nwith extension 'php4' or 'php5'. Additionally a list of exclude patterns can be appended after a\ncolon <code class=\"inline\">:</code>. Files and directories matching one of the exclude patterns will be filtered out.</p><h3>To sum up the preparation</h3><p>Lets say we have a folder named 'tests' where we will place our test scripts. We create a file named\n<code class=\"inline\">phptestr&#46;json</code> in this folder and place this inside the file:</p><code class=\"lang-js block\">{\n\t\"init\": \"init_tests.php\",\n\t\"pattern\": \"**/**.php:_*|**/_*\"\n}</code><p>This will tell <code class=\"inline\">phptestr</code> to test all files with extension 'php' in all subfolders, but not in the\nsame folder (we don't want our init script to be treated as a test script) and also to include a\nfile named 'init_tests.php' before loading each test script.</p><p>So we have a nice setup and only have to open <code class=\"inline\">http:&#47;&#47;localhost&#47;phptestr&#47;phptestr&#46;php?target=&#46;&#46;&#47;myproject&#47;tests</code>.</p><h3>Writing tests</h3><p>Test are created by writing PHP files describing groups of test conditions. The groups\nare called \"test cases\". And each condition is a test. The simplest test looks like this:</p><code class=\"lang-php block\">&lt;?\ntestCase( function () {\n\ttest( false ); //this condition will fail so will the test case\n} );\n?&gt;</code><p>For overview of all supported functions in the test environment, that is the functions available\nto your test scripts look in the docs for file <strong>'test&#95;environment.php'</strong> under the package\n<strong>'phptestr.test&#95;environment'</strong>. In this file you will find short overview of all functions\nwith examples how to use them. These examples are found as working scripts in the <em>example</em> subfolder\nof phptestr. In the docs, under the same section, you can also check the reference for each\nindividual function.</p><h3>Using the GUI</h3><p>Loading <code class=\"inline\">phptestr&#46;php</code> will show the results in a simple graphical interface. Each test script\nis represented by a box with the title of the file. Scripts that passed all tests will be\ngreen and will be collapsed by default. You can expand them by clicking on the title.\nScripts which failed to pass all tests or have errors in them will be put on the top of the list\nand will be expanded by default. In the test script you will see green boxes with the names\nall test cases that were successful. Test cases that were not successful are red and will display\nwhat failed or what the error was and on which line of the script it happened. Sometimes you\ncan find additional details if there is a link \"exception...\" or \"trace...\" in the box. This\ninformation will be shown in the browser console. There is additional link called \"extract...\" next\nto the title of the file. This will open the selected script, without other scripts,\nin a new browser tab. Useful while debugging. Information echoed by the scripts will be shown\nin yellow boxes.</p><p>Screenshot of the results of the example tests can be found in <a href=\"&#46;&#46;&#47;example&#47;screenshot&#46;png\">example/screenshot.png</a>.</p><p>The GUI is tested only on Google Chrome but there is no reason other browsers wouldn't work.</p><h2>Internals</h2><h3>Testing the tester</h3><p>Loading the file <a href=\"&#46;&#46;&#47;tests&#46;php\">tests.php</a> will check that phptestr is working as expected.</p><h3>Even more internals</h3><p>Further documentation can be found in the docs under the package <code class=\"inline\">phptestr&#46;host</code>.</p>","tags":{},"def":{"type":"page"}});