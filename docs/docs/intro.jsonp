jsdocgen_data("intro.jsonp",{"description":"<h1>phptestr</h1><p>phptestr is framework for writing unitests for PHP and GUI for displaying the results.\nThe project aims to provide flexible environment that makes writing tests quick and easy.\nBy providing GUI environment for testing it further encourages test driven development.\nThe project is divided into \"host\" and \"script\" part. The host starts each test\nscript in a new sandbox thus ensuring no kind of error could break it and no error\nwill remain untraced.</p><h2>Status</h2><p><strong>This is release version 0.9</strong>. It is considered beta. I've been using it for quite some time,\nbut it is missing a feature or two and can use some polish. At the moment I have only Windows\navailable so only Windows is tested, but there is nothing Windows specific in the project.</p><h2>Very quick start</h2><ol><li>Check the screenshot in <a href=\"https:&#47;&#47;raw&#46;github&#46;com&#47;Perennials&#47;phptestr&#47;master&#47;example&#47;screenshot&#46;png\">example/screenshot.png</a>.</li><li>Assuming you already have <code class=\"inline\">PHP 5&#46;3</code> or higher installed in your path.</li><li>Go to where you have downloaded phptestr and start <code class=\"inline\">phptestr &#45;target=example</code> - this should open a new browser window\n  for the address <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr?target=example</code> and show the results of the tests.</li></ol><p>Further:</p><ul><li>By starting phptestr, it will create a micro server where it listens for commands from your browser.</li><li>Examples are found in the <code class=\"inline\">example</code> folder, they are really short, nothing requiring a lot of effort to learn.</li><li>From these docs you are only concerned with thepackage <code class=\"inline\">phptestr&#46;test&#95;environment</code> -\n  this is the environment for the test scripts.</li><li>Very quick explanation of the examples is found in the docs in the file\n  <code class=\"inline\">lib&#47;test&#95;environment&#46;php</code> under the package <code class=\"inline\">phptestr&#46;test&#95;environment</code> (this would be\n  <a href=\"&#35;file&#47;lib&#47;test&#95;environment&#46;php\">docs/index.html#file/lib/test_environment.php</a>).</li></ul><h2>Authors</h2><p>Borislav Peev (borislav.asdf at gmail dot com)</p><h2>Usage</h2><p>Since this is tester for PHP, you need to have <code class=\"inline\">PHP 5&#46;3</code> or higher installed, there are no other dependencies.\nIf you are not using Windows, you will need to convert phptestr.bat to shell script (it is two lines long),\nand also download the Node.js binary for your system. Other OS-es will be officially supported in the future.</p><p>You can start the tests in either GUI (browser) mode or CLI mode. This is selected by command line arguments.\nBy just starting <code class=\"inline\">phptestr</code> it will start in GUI mode, opening your default browser and listening on a specific\nport for commands issued by the browser. List of all available command line options is found below.</p><h3>Starting the tests</h3><p>To start the tests just run <code class=\"inline\">phptestr</code> and point it to the location of your tests,\ne.g. <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr?target=example</code> - this will run the example\ntests that come with the project. Alternatively you can start <code class=\"inline\">phptestr &#45;target=example</code> directly.\nThe <code class=\"inline\">target</code> argument is directory relative to the directory where phptestr is located.</p><p>If you like to run only a selection of the tests found in this directory you can add\n<code class=\"inline\">filter</code> argument. For example <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr&#46;php?target=example&amp;filter=&#42;&#95;3&#42;&#46;php</code> or\n<code class=\"inline\">phptestr &#45;target=example &#45;filter=&#42;&#95;3&#42;&#46;php</code> will run only the files 'test&#95;3a.php' and 'test&#95;3b.php'.\nFilter patterns are explained below.</p><p>Finally you can interact with the test scripts by passing them some arguments with the argument\ncalled <code class=\"inline\">args</code>. For example <code class=\"inline\">http:&#47;&#47;127&#46;0&#46;0&#46;1:3355&#47;phptestr?target=example&amp;filter=test&#95;5&#46;php&amp;args=1&amp;args=2</code>\nor <code class=\"inline\">phptestr &#45;target=example &#45;filter=test&#95;5&#46;php &#45;args=1 &#45;args=2</code> will start the fifth example of phptestr,\nwhich can accept arguments, and it will display the value of 'args'.</p><h3>Detailed configuration</h3><p>By loading the directory 'example', phptestr checks for the presence of a file named <code class=\"inline\">phptestr&#46;json</code>.\nThis file could be used to specify additional options for your project. None of these\nsettings is mandatory.</p><code class=\"lang-js block\">{\n\t\"dir\": \"\",\n\t\"init\": \"\",\n\t\"pattern\": \"*.php:.*|_*\"\n}</code><ul><li><code class=\"inline\">dir</code> - can be used to override the base directory of your scripts.</li><li><code class=\"inline\">init</code> - can be used to specify initialization script for your project. E.g. to include some\n  prerequisites or to boot your __autoload function.</li><li><code class=\"inline\">pattern</code> - can be used to override which files will be recognized as test scripts (see below).\n  The default pattern is the one above - includes all '.php' files, non recursively, excluding\n  all files starting with dot or underscore.</li></ul><h3>Wildcard patterns</h3><p>Patterns are simple regular expressions. <code class=\"inline\">&#42;</code> matches everything but forward slash <code class=\"inline\">&#47;</code>, and <code class=\"inline\">&#42;&#42;</code>\nmatches everything. Non greedy and only forward slashes are supported (they work fine on Windows).\nFor example <code class=\"inline\">&#42;&#46;php</code> will match all files with extension 'php' in the same directory. <code class=\"inline\">&#42;&#42;&#46;php</code>\nwill match all files with extension 'php' in the same directory and all sub directories. Multiple\npatterns can be delimited with a pipe <code class=\"inline\">&#124;</code>. For example <code class=\"inline\">&#42;&#46;php4&#124;&#42;&#46;php5</code> will match all files \nwith extension 'php4' or 'php5'. Additionally a list of exclude patterns can be appended after a\ncolon <code class=\"inline\">:</code>. Files and directories matching one of the exclude patterns will be filtered out.</p><h3>To sum up the preparation</h3><p>Lets say we have a folder named 'tests' where we will place our test scripts. We create a file named\n<code class=\"inline\">phptestr&#46;json</code> in this folder and place this inside the file:</p><code class=\"lang-js block\">{\n\t\"init\": \"init_tests.php\",\n\t\"pattern\": \"**/**.php:_*|**/_*\"\n}</code><p>This will tell <code class=\"inline\">phptestr</code> to test all files with extension 'php' in all subfolders, but not in the\nsame folder (we don't want our init script to be treated as a test script) and also to include a\nfile named 'init_tests.php' before loading each test script.</p><p>So we have a nice setup and only have to run <code class=\"inline\">phptestr &#45;target=&#46;&#46;&#47;myproject&#47;tests</code>.</p><p>Be mindful that phptestr expects the error logging configuration of PHP to be in a certain way.\nIt sets this configuration before running a test script, but you should take care that your\ninit script or any library it may include will not change these settings. If you do change them\nit is possible that errors in your scripts are not properly tracked. If you need to check exactly\nwhat the error logging settings are check the file 'lib/run_test_script.php'. Additionally, your\nscripts should not output anything to the console (stdout) or you will get errors in your tests.\nIf you need to output something while testing use the appropriate functions provided by the\ntest environment.</p><h3>Writing tests</h3><p>Test are created by writing PHP files describing groups of test conditions. The groups\nare called \"test cases\". And each condition is a test. The simplest test looks like this (the name is optional):</p><code class=\"lang-php block\">&lt;?\ntestCase( 'My Test', function () {\n\ttest( true ); //this condition will pass\n\ttest( false ); //this condition will fail so will the test case\n} );\n?&gt;</code><p>For overview of all supported functions in the test environment (e.g. testCase(), test(), etc.)\nlook in the docs for file <strong>'test&#95;environment.php'</strong> under the package\n<strong>'phptestr.test&#95;environment'</strong>. In this file you will find short overview of all functions\nwith examples how to use them. These examples are found as working scripts in the <em>example</em> subfolder\nof phptestr. In the docs, under the same section, you can also check the reference for each\nindividual function.</p><h3>Using the GUI</h3><p>Starting <code class=\"inline\">phptestr &#45;target=example</code> will show the results in a simple graphical interface. Each test script\nis represented by a box with the title of the file. Scripts that passed all tests will be\ngreen and will be collapsed by default. You can expand them by clicking on the title.\nScripts which failed to pass all tests or have errors in them will be put on the top of the list\nand will be expanded by default. In the test script you will see green boxes with the names\nall test cases that were successful. Test cases that were not successful are red and will display\nwhat failed or what the error was and on which line of the script it happened. Sometimes you\ncan find additional details if there is a link \"exception...\" or \"trace...\" in the box. This\ninformation will be shown in the browser console. There is additional link called \"extract...\" next\nto the title of the file. This will open the selected script, without other scripts,\nin a new browser tab. Useful while developing or debugging. Information echoed by the scripts will be shown\nin yellow boxes.</p><p>Screenshot of the results of the example tests can be found in <a href=\"https:&#47;&#47;raw&#46;github&#46;com&#47;Perennials&#47;phptestr&#47;master&#47;example&#47;screenshot&#46;png\">example/screenshot.png</a>.</p><p>The GUI is tested only on Google Chrome at the moment, but there is no reason other browsers wouldn't work.</p><h2>Command line options</h2><code class=\"block\">phptestr [OPTIONS]</code><p>Where <strong>OPTIONS</strong> is:</p><code class=\"block\">-target=directory</code><p>Directory where to look for tests or phptestr.json. Optional when starting in GUI mode as\nit can be chosen from the browser.</p><code class=\"block\">-cli</code><p>Optional. Will not start a browser but run the tests and display the results in the console. This\nmode does not support all features and is meant for automation.</p><code class=\"block\">-phpbin=path</code><p>Optional. Path to the PHP binary to use for starting the tests. Defaults to 'php' and it must be installed\nin the system path for the default to work.</p><code class=\"block\">-host=hostname\n-port=portnumber</code><p>Optional, only supported in GUI mode. Will make phptestr listen for browser commands on a different host (ip)\nand port. Defaults to 127.0.0.1:3355 .</p><h2>Internals</h2><h3>Testing the tester</h3><p><code class=\"inline\">phptestr test</code> will check that phptestr is working as expected.</p>","tags":{},"def":{"type":"page"}});